#include <stdio.h>
#include <stdlib.h>

typedef struct item{
    int *weight;
    int *cost;
    int len;
}item;

typedef struct queue{
    int **item;
    int len;
}queue;

int max(int a, int b){
    return a > b ? a:b;
}

queue *make_queue(int num_of_items){
    queue *q = malloc(sizeof(queue));
    q->item = malloc(num_of_items * sizeof(int*));
    for(int i = 0; i < num_of_items; i++) {
        q->item[i] = malloc(2 * sizeof(int));
    }
    q->len = 0;
    return q;
}

void push_queue(const item *data, queue *q, int index){
    q->item[q->len][0] = data->weight[index];
    q->item[q->len][1] = data->cost[index];
    q->len++;
}

item *make_data(int num_of_items){
    item *d = malloc(sizeof(item));
    d->weight = malloc(num_of_items * sizeof(int));
    d->cost = malloc(num_of_items * sizeof(int));
    d->len = 0;
    return d;
}

void push_data(item *data, int weight, int cost){
    data->weight[data->len] = weight;
    data->cost[data->len] = cost;
    data->len++;
}

void fill_table(const item *data, int **table, int num_of_items, int max_capacity){
    for(int i = 0; i < num_of_items + 1; i++) {
        for (int j = 0; j < max_capacity + 1; j++) {
            if (i == 0 || j == 0) {
                table[i][j] = 0;
            } else {
                int last_value = table[i - 1][j];
                if (j >= data->weight[i - 1]) {
                    int new_value = table[i - 1][j - data->weight[i - 1]] + data->cost[i - 1];
                    table[i][j] = max(last_value, new_value);
                } else {
                    table[i][j] = last_value;
                }
            }
        }
    }
}

void taken_items(const item *data, queue *q, int **table, int num_of_items, int max_capacity){
    for(int i = num_of_items; i > 0; i--){
        if(table[i][max_capacity] != table[i-1][max_capacity]){
            push_queue(data, q, i-1);
            max_capacity -= data->weight[i-1];
        }
    }
}

void free_memory(int **table, item *data, queue *q, int num_of_items){
    for(int i = 0; i < num_of_items + 1; i++){
        free(table[i]);
    }
    free(table);
    for(int i = 0; i < num_of_items; i++){
        free(q->item[i]);
    }
    free(q->item);
    free(q);
    free(data->weight);
    free(data->cost);
    free(data);

}

int main(){
    int num_of_items = 0, max_capacity = 0, weight = 0, cost = 0;
    if(scanf("%d %d", &num_of_items, &max_capacity) == EOF){
        return 0;
    }

    int **table = malloc((num_of_items + 1)*sizeof(*table));
    for(int i = 0; i < num_of_items+1; i++){
        table[i] = malloc((max_capacity + 1)*sizeof(**table));
    }

    item *data = make_data(num_of_items);
    queue *q = make_queue(num_of_items);

    for(int i = 0; i < num_of_items; i++){
        if(scanf("%d %d", &weight, &cost) == EOF){
            free_memory(table, data, q, num_of_items);
            return 0;
        }
        push_data(data, weight, cost);
    }

    fill_table(data, table, num_of_items, max_capacity);
    taken_items(data, q, table, num_of_items, max_capacity);

    int max_cost = table[num_of_items][max_capacity];
    printf("%d\n", max_cost);

    for(int i = q->len-1 ; i >= 0; i--){
        printf("%d %d\n", q->item[i][0], q->item[i][1]);
    }
    free_memory(table, data, q, num_of_items);
    return EXIT_SUCCESS;
}
