#include <stdio.h>
#include <string.h>
#include <ctype.h>

void swap(char *a, char *b) {
    char tmp = *a;
    *a = *b;
    *b = tmp;
}

int bad_input(){
    printf("bad input");
    return 0;
}

int Check(char *Sequence) {
    for (int i = 0; Sequence[i]!='\0'; i++) {
        if (isdigit(Sequence[i]) == 0) {
            return 0;
        }
        for (int j = i + 1; Sequence[j]!='\0'; j++) {
            if (Sequence[i] == Sequence[j]) {
                return 0;
            }
        }
    }
    return 1;
}

void reverse(char str[], int Index_Max) {
    int length = strlen(str);
    for (int first=Index_Max+1, last=length-1; first<last; first++, last--){
        int buf=str[first];
        str[first]=str[last];
        str[last]=buf;
    }
}

int NextPermutation(char *Sequence, int sequence_len) {
    int Index_Max = sequence_len - 1;
    int MAX = 0; // Максимальный элемент в массиве, стоящий перед большим элементом

    int perm_counter = 0;
    for (int i = 0; i < sequence_len; ++i) {
        if ((Sequence[i] < Sequence[i + 1])) {
            MAX = Sequence[i];
            Index_Max = i;
            perm_counter += 1;
        }
    }

    if (perm_counter != 0) {
        int element_after_max = 0;
        for (int i = Index_Max + 1; i < sequence_len; ++i) {
            if (Sequence[i] > MAX) {
                element_after_max = i;
            }
        }
        swap(&Sequence[Index_Max], &Sequence[element_after_max]);
        reverse(Sequence, Index_Max);

        return 1;
    }
    return 0;
}

int main() {
    char Sequence[100];
    if (fgets(Sequence, 100, stdin) == NULL) {
        bad_input();
    }

    int flag=1;

    int sequence_len = strlen(Sequence) - 1;
    Sequence[sequence_len] = '\0';

    long long N;
    if (scanf("%lld", &N) == 0) {
        return 0;
    }

    if (Check(Sequence)==0){
        flag=0;
        bad_input();
    }

    if (N < 0) {
        flag=0;
        bad_input();
    }

    while (N > 0 && flag!=0) {
        int correct = NextPermutation(Sequence, sequence_len);
        if (correct == 1) {
            printf("%s\n", Sequence);
            }
        else{
            break;
        }
        N--;
    }
    return 0;
}
