#include <stdio.h>
#include <stdlib.h>

int max(int a, int b)
{
    return a > b ? a : b;
}

int **knapsack(int **table,int *values, int *weights, int *selected ,int capacity, int num_of_items){

    for(int i = 0; i < num_of_items + 1; i++){
        for(int j = 0; j < capacity + 1; j++){
            if(i == 0 || j == 0){
                table[i][j]= 0;
            }
            else{
                int last_val = table[i - 1][j];
                if(j >= weights[i-1]){
                    int new_val = table[i - 1][j - weights[i - 1]] + values[i-1];
                    table[i][j] = max(last_val, new_val);
                }
                else{
                    table[i][j] = last_val;
                }
            }
        }
    }

    while(table[num_of_items][capacity] != 0){
        if(table[num_of_items][capacity] == table[num_of_items- 1][capacity]){
            num_of_items = num_of_items - 1;
        }
        else{
            selected[num_of_items - 1] = 1;
            capacity = capacity - weights[num_of_items - 1];
            num_of_items = num_of_items - 1;
        }
    }
    return table;
}

void free_memory(int **table,int *values, int *weights, int *selected, int num_of_items){
    free(values);
    free(weights);
    free(selected);
    for(int i = 0; i < num_of_items + 1; i++){
        free(table[i]);
    }
    free(table);
}

int main(){
    int num_of_items = 0, capacity = 0, value = 0, weight = 0;

    if(scanf("%d %d", &num_of_items, &capacity) == EOF){
        return 0;
    }

    int *values = malloc(num_of_items * sizeof(int));
    int *weights = malloc(num_of_items * sizeof(int));
    int *selected = calloc(num_of_items,  sizeof(int));

    int **table = malloc((num_of_items + 1) * sizeof(int*));
    for(int i = 0; i < num_of_items + 1; i++){
        table[i] = malloc((capacity + 1) * sizeof(int));
    }

    for(int i = 0; i < num_of_items; i++){
        if(scanf("%d %d", &weight, &value) == EOF){
            free_memory(table,values, weights, selected, num_of_items);
            return 0;
        }
        else{
            weights[i] = weight;
            values[i] = value;
        }
    }

    int **res = knapsack(table ,values, weights, selected, capacity, num_of_items);

    printf( "%d\n", res[num_of_items][capacity]);
    for(int i = 0; i < num_of_items; i++){
        if(selected[i] == 1){
            printf("%d %d \n", weights[i], values[i]);
        }
    }
    free_memory(table,values, weights, selected, num_of_items);
    return 0;
}
