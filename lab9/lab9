#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAXSIZE 5000

typedef enum {
    PATH_VISITED,
    PATH_NOT_VISITED
} path_exist;

typedef enum {
    BAD_LENGTH,
    BAD_LINES,
    BAD_VERTICES,
    BAD_VERTEX,
    BAD_EDGES,
    SUCCESS
} exit_codes;

char *exit_message[] = {
        "bad length",
        "bad number of lines",
        "bad number of vertices",
        "bad vertex",
        "bad number of edges"
};

void print_function(long long *distances, int *parent, int num_of_vertices, char check_overflow, int point2) {
    for (int i = 0; i < num_of_vertices; i++) {
        if (distances[i] <= INT_MAX) {
            printf("%lli", distances[i]);
        }
        else {
            if (distances[i] != LLONG_MAX) {
                printf("INT_MAX+");
            }
            else {
                printf("oo");
            }
        }
        printf(" ");
    }
    printf("\n");

    if (check_overflow == 1) {
        printf("overflow");
    }
    else {
        if (distances[point2 - 1] == LLONG_MAX) {
            printf("no path");
        }
        else {
            int current = point2 - 1;
            printf("%d ", point2);
            while (current != parent[current]) {
                current = parent[current];
                printf("%d ", current + 1);
            }
        }
    }
}

int find_min_edge(int num_of_vertices, long long *distances, path_exist *path) {
    long long min = LLONG_MAX;
    int index = 0;
    for (int i = 0; i < num_of_vertices; i++) {
        if (distances[i] < min && path[i] != PATH_VISITED) {
            min = distances[i];
            index = i;
        }
    }
    return index;
}

void free_memory(long long *distances, path_exist *path_to_vertex, int *parent) {
    free(distances);
    free(path_to_vertex);
    free(parent);
}

exit_codes dijkstra_algorithm(unsigned int *adjacency_matrix, int num_of_vertices, int point1, int point2) {
    long long *distances = malloc(num_of_vertices * sizeof(long long));
    path_exist *path_to_vertex = malloc(num_of_vertices * sizeof(path_exist));
    int *parent = malloc(num_of_vertices * sizeof(int));

    for (int i = 0; i < num_of_vertices; i++) {
        if (point1 - 1 == i) {
            distances[i] = 0;
        } else {
            distances[i] = LLONG_MAX;
        }
        path_to_vertex[i] = PATH_NOT_VISITED;
        parent[i] = i;
    }

    distances[point1 - 1] = 0;
    char check_overflow = 0;
    int current = point1 - 1;

    for (int i = 0; i < num_of_vertices; i++) {
        path_to_vertex[current] = PATH_VISITED;
        for (int j = 0; j < num_of_vertices; j++) {
            unsigned int current_cell = adjacency_matrix[current * num_of_vertices + j];
            if (current_cell && (distances[j] >= distances[current] + current_cell) &&
                (path_to_vertex[j] == PATH_NOT_VISITED)) {
                if (distances[j] > INT_MAX && distances[j] != LLONG_MAX && (j == point2 - 1)) {
                    check_overflow = 1;
                }
                distances[j] = distances[current] + current_cell;
                parent[j] = current;
            }
        }
        current = find_min_edge(num_of_vertices, distances, path_to_vertex);
    }
    print_function(distances, parent, num_of_vertices, check_overflow, point2);
    free_memory(distances, path_to_vertex, parent);
    return SUCCESS;
}

void graph_add(unsigned int *adjacency_matrix, int x, int y, unsigned long long length, int num_of_vertices) {
    adjacency_matrix[x * num_of_vertices + y] = length;
}

exit_codes read_graph(unsigned int *adjacency_matrix, int num_of_vertices, int num_of_edges) {
    int x = 0, y = 0;
    long long length = 0;
    for (int i = 0; i < num_of_edges; i++) {
        if (scanf("%d %d %lld", &x, &y, &length) != 3) {
            return BAD_LINES;
        }
        if (x < 1 || x > num_of_vertices || y < 1 || y > num_of_vertices) {
            return BAD_VERTEX;
        }
        if (length < 0 || length > INT_MAX) {
            return BAD_LENGTH;
        }
        graph_add(adjacency_matrix, x - 1, y - 1, length, num_of_vertices);
        graph_add(adjacency_matrix, y - 1, x - 1, length, num_of_vertices);
    }
    return SUCCESS;
}

exit_codes check_input(int num_of_vertices, int num_of_edges, int point1, int point2) {
    if (num_of_vertices < 0 || num_of_vertices > MAXSIZE) {
        return BAD_VERTICES;
    }
    if (point1 > num_of_vertices || point1 < 1 || point2 > num_of_vertices || point2 < 1) {
        return BAD_VERTEX;
    }
    if (num_of_edges < 0 || num_of_edges > (num_of_vertices * (num_of_vertices - 1) / 2)) {
        return BAD_EDGES;
    }
    return SUCCESS;
}

int main() {
    int num_of_vertices = 0, num_of_edges = 0, point1 = 0, point2 = 0;

    if (scanf("%d %d %d %d", &num_of_vertices, &point1, &point2, &num_of_edges) != 4) {
        printf("%s", exit_message[BAD_LINES]);
        return 0;
    }

    exit_codes res = check_input(num_of_vertices, num_of_edges, point1, point2);
    if (res != SUCCESS) {
        printf("%s", exit_message[res]);
        return 0;
    }

    unsigned int *adjacency_matrix = calloc(num_of_vertices * num_of_vertices, sizeof(unsigned int));

    res = read_graph(adjacency_matrix, num_of_vertices, num_of_edges);
    if (res != SUCCESS) {
        printf("%s", exit_message[res]);
        free(adjacency_matrix);
        return 0;
    }

    dijkstra_algorithm(adjacency_matrix, num_of_vertices, point1, point2);
    free(adjacency_matrix);
    return 0;
}
