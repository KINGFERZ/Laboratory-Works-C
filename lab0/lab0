#include <stdio.h>
#include <math.h>

#define INACCURACY 1e-10
#define LEN_NUMBER 13

#define INTEGER 1
#define FRACTION 0
#define FALSE 0

char toUpper(char c) {
    if (c >= 'a' && c <= 'f')
        c = (char) (c - ('a' - 'A'));
    return c;
}

int letter(char c) {
    c = toUpper(c);
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    return FALSE;
}

char number_to_char(int num) {
    if (num > 9) {
        return (char) (num + 'a' - 10);
    } else {
        return (char) (num + '0');
    }
}

int char_to_number(char c, int b) {
    if (letter(c) != 0) {
        b = letter(c);
    } else {
        b = c - '0';
    }
    return b;
}

int check_function(char *number, int b1, int b2, int counter_points, int len_integer, int len_fraction) {

    if ((b1 < 2 || b1 > 16) || (b2 < 2 || b2 > 16)) {
        return 1;
    }

    int digit_of_number;

    for (int i = 0; i < LEN_NUMBER; i++) { // Проверка на входную b1 CC
        if (number[i] == '\0') {
            break;
        } else if (number[i] == '.') {
            counter_points += 1;
        } else if ((letter(number[i]) != 0) && (letter(number[i]) >= b1)) {
            return 1;
        } else if (letter(number[i]) == 0) {
            digit_of_number = number[i] - '0';
            if ((digit_of_number >= b1) || (digit_of_number > 9) || (digit_of_number < 0)) {
                return 1;
            }
        }
    }
    if (((len_integer == 0 || len_fraction == 0) && (counter_points >= 1)) || (counter_points > 1)) {
        return 1;
    }
    return 0;
}

void convert_to_dec(char *number, int len_integer, int len_fraction, int b1, long *integer_part, double *fraction_part) {
    int count_fraction_part_digits = 1, flag, b = 0;
    flag = INTEGER;

    for (int j = 0; j < LEN_NUMBER; j++) {
        if (number[j] == '\0') {
            break;
        }
        else if (number[j] == '.') {
            flag = FRACTION;
        }
        else {
            if (flag == INTEGER) {
                b = char_to_number(number[j], b);
                *integer_part += b * pow(b1, (len_integer - 1));
                len_integer -= 1;
            } else if (flag == FRACTION) {
                b = char_to_number(number[j], b);
                *fraction_part += b * (1.0 / pow(b1, count_fraction_part_digits));
                if (count_fraction_part_digits < len_fraction) {
                    count_fraction_part_digits += 1;
                }
            }
        }
    }
}

double Floor(double fraction_part) {
    fraction_part = (int) fraction_part;
    return fraction_part;
}

double Fabs(double fraction_part) {
    if (fraction_part < 0) {
        fraction_part = fraction_part * (-1);
    }
    return fraction_part;
}

void swap(char *a, char *b) {
    char buf = *a;
    *a = *b;
    *b = buf;
}

int convert_to_other(char *dec_remain, long integer_part, double fraction_part, int b2) {
    int count = 0, n;

    if ((integer_part == 0) && (Fabs(fraction_part - 0.0) < INACCURACY)) {
        printf("0");
        return 0;
    } else if (integer_part == 0) {
        dec_remain[0] = '0';
        dec_remain[1] = '.';
    } else {
        while (integer_part > 0) {
            n = integer_part % b2;
            dec_remain[count] = number_to_char(n);
            integer_part /= b2;
            count += 1;
        }
        count -= 1;
        for (int i = 0; i <= count / 2; i++) {
            swap(&dec_remain[i], &dec_remain[count - i]);
        }
        if ((fraction_part - 0.0) < INACCURACY) {
            dec_remain[count + 1] = '\0';
            printf("%s", dec_remain);
            return 0;
        }
        dec_remain[count + 1] = '.';
    }
    for (int i = 0; i < 12; i++) {
        fraction_part *= b2;
        double digit_of_number = Floor(fraction_part);
        dec_remain[count + 2 + i] = number_to_char(digit_of_number);
        if ((fraction_part - digit_of_number) < INACCURACY) {
            dec_remain[count + 3 + i] = '\0';
            break;
        }
        fraction_part -= digit_of_number;
    }
    printf("%s", dec_remain);
    return 0;
}

void digit_counter(char *number, int *len_integer, int *len_fraction, int flag) {
    for (int j = 0; j < LEN_NUMBER; j++) {
        if (number[j] == '\0') {
            break;
        } else if (number[j] == '.') {
            flag = FRACTION;
        }
        if (flag == INTEGER) {
            *len_integer += 1;
        } else if (flag == FRACTION) {
            *len_fraction += 1;
        }
    }
}

int main(void) {
    int b1, b2, len_integer = 0, len_fraction = -1, counter_points = 0;
    char number[100], dec_remain[100];
    long integer_part = 0;
    double fraction_part = 0.0;

    if ((scanf("%2d %2d", &b1, &b2) != 2) || (scanf("%13s", number) > 13)) {
        printf("bad input");
        return 0;
    }

    digit_counter(number, &len_integer, &len_fraction, INTEGER);

    if (check_function(number, b1, b2, counter_points, len_integer, len_fraction) != 0) {
        printf("bad input");
        return 0;
    }

    convert_to_dec(number, len_integer, len_fraction, b1, &integer_part, &fraction_part);
    convert_to_other(dec_remain, integer_part, fraction_part, b2);

    return 0;
}
