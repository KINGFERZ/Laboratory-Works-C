#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

void swap(int *a, int *b) {
    int buf = *a;
    *a = *b;
    *b = buf;
}

void heapify(int *array, int length, int i) {
    int root = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < length && array[l] > array[root]) {
        root = l;
    }

    if (r < length && array[r] > array[root]) {
        root = r;
    }
    if (root != i) {
        swap(&array[i], &array[root]);
        heapify(array, length, root);
    }
}

void heapsort(int *array, int length) {
    for (int i = length / 2 - 1; i >= 0; i--) {
        heapify(array, length, i);
    }

    for (int i = length - 1; i >= 0; i--) {
        swap(&array[0], &array[i]);
        heapify(array, i, 0);
    }
}

int main() {
    int length;

    if (scanf("%d", &length) == 0) {
        return 0;
    }

    int *array = (int *) malloc(sizeof(int) * length);

    assert(array);

    for (int i = 0; i < length; i++) {
        if (scanf("%d", &array[i]) == 0) {
            free(array);
            return 0;
        }
    }

    heapsort(array, length);

    for (int i = 0; i < length; i++) {
        printf("%d ", array[i]);
    }
    free(array);
    return 0;
}
