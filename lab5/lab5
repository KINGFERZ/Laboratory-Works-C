#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET 256
#define SIZE_OF_BYTE 8
#define MAX_BUFFER_LEN 1000000

typedef unsigned int ui;
typedef unsigned char uc;

typedef struct huffman_tree{
    uc symbol;
    ui weight;
    struct huffman_tree *left;
    struct huffman_tree *right;
}huffman_tree;

typedef struct {
    huffman_tree *queue[ALPHABET];
    int front;
    int back;
} priority_queue;

typedef struct {
    uc *buf;
    ui byte_count;
    ui bite_count;
    ui bite_size;
} data;

priority_queue *create_queue() {
    priority_queue *queue = malloc(sizeof(priority_queue));
    queue->front = -1;
    queue->back = -1;

    return queue;
}

void queue_push(priority_queue *queue, huffman_tree *node) {
    if (queue->front == -1 && queue->back == -1) {
        queue->front++;
        queue->back++;
        queue->queue[queue->front] = node;
        return;
    }

    int i;
    for (i = 0; i <= queue->back; i++) {
        if (node->weight >= queue->queue[i]->weight) {
            for (int j = queue->back + 1; j > i; j--) {
                queue->queue[j] = queue->queue[j - 1];
            }
            queue->queue[i] = node;
            queue->back++;
            return;
        }
    }
    queue->back++;
    queue->queue[i] = node;
}

huffman_tree *queue_pop(priority_queue *queue) {
    return queue->queue[queue->back--];
}

huffman_tree *create_huffman_tree(uc symbol, ui weight, huffman_tree *left, huffman_tree *right) {
    huffman_tree *node = malloc(sizeof(huffman_tree));

    node->symbol = symbol;
    node->weight = weight;
    node->left = left;
    node->right = right;

    return node;
}

void make_huffman_tree(huffman_tree **root, ui *buf) {
    priority_queue *queue = create_queue();

    for (int i = 0; i < ALPHABET; i++) {
        if (buf[i] != 0) {
            queue_push(queue, create_huffman_tree(i, buf[i], 0, 0));
        }
    }

    while ((queue->back - queue->front) > 0) {
        huffman_tree *first_node = queue_pop(queue);
        huffman_tree *second_node = queue_pop(queue);

        huffman_tree *linked = create_huffman_tree(0, first_node->weight + second_node->weight, first_node,
                                                   second_node);
        queue_push(queue, linked);
    }

    huffman_tree *tmp = queue_pop(queue);
    *root = tmp;
    free(queue);
}

void free_tree(huffman_tree **root) {
    if ((*root)->left != NULL) {
        free_tree((&(*root)->left));
        free_tree(&((*root)->right));
    }
    free((*root));
    (*root) = NULL;
}

long read_file(ui *stat, FILE *file) {
    uc current_symbol;
    long length = 0;

    for (int i = 0; i < ALPHABET; i++) {
        stat[i] = 0;
    }

    while (fread(&current_symbol, 1, 1, file)) {
        stat[current_symbol]++;
        length++;
    }

    fseek(file, 1, SEEK_SET);
    return length;
}

void make_table(huffman_tree *root, char **codes, char *current_code) {
    size_t length = strlen(current_code);

    if (root->left == NULL) {
        codes[root->symbol] = (char *) malloc(length + 1);
        strcpy(codes[root->symbol], current_code);
    } else {
        current_code[length] = '0';
        current_code[length + 1] = '\0';

        if (root->left != NULL) {
            make_table(root->left, codes, current_code);
        }

        current_code[length] = '1';
        current_code[length + 1] = '\0';

        if (root->right != NULL) {
            make_table(root->right, codes, current_code);
        }
    }
}

void free_table(char **table) {
    for (int i = 0; i < ALPHABET; i++) {
        if (table[i]) {
            free(table[i]);
        }
    }
}

void init_data(data *data, ui byte_count) {
    data->bite_size = byte_count;
    data->bite_count = SIZE_OF_BYTE;
    data->byte_count = 0;
    data->buf = (uc *) malloc(byte_count * sizeof(uc));

    for (ui i = 0; i < byte_count; i++) {
        data->buf[i] = 0;
    }
}

void bit_writing(FILE *file, data *data, uc bit) {
    data->buf[data->byte_count] |= ((bit - '0') << (data->bite_count - 1));
    data->bite_count--;
    if (data->bite_count == 0) {
        fwrite(&data->buf[data->byte_count], sizeof(uc), 1, file);
        data->bite_count = SIZE_OF_BYTE;
        data->buf[data->byte_count] = 0;
    }
}

int unpack_bit(data *data, uc *bit) {
    if (data->byte_count < data->bite_size) {
        *bit = (data->buf[data->byte_count] >> (data->bite_count - 1)) & 1;
        data->bite_count--;

        if (data->bite_count == 0) {
            data->byte_count++;
            data->bite_count = SIZE_OF_BYTE;
        }
        return 0;
    } else {
        return 1;
    }
}

void unpack_byte(data *data, uc *byte) {
    *byte = data->buf[data->byte_count] << (SIZE_OF_BYTE - data->bite_count);
    data->byte_count++;
    *byte |= data->buf[data->byte_count] >> data->bite_count;
}

uc unpacking_char(FILE *file, huffman_tree *root, data *data) {
    if (root->left != NULL) {
        unsigned char bit = 0;
        if (unpack_bit(data, &bit) != 0) {
            if (fread(data->buf, 1, MAX_BUFFER_LEN, file)) {}
            data->byte_count = 0;
            unpack_bit(data, &bit);
        }

        if (bit != 0) {
            return unpacking_char(file, root->right, data);
        } else {
            return unpacking_char(file, root->left, data);
        }
    } else {
        return root->symbol;
    }
}

void pack_huffman_tree(FILE *file, data *data, huffman_tree *root) {
    if (root->left == NULL) {
        bit_writing(file, data, '0');
        for (int i = 0; i < SIZE_OF_BYTE; i++) {
            bit_writing(file, data, ((root->symbol) >> (7 - i) & 1) + '0');
        }
    } else {
        bit_writing(file, data, '1');
        pack_huffman_tree(file, data, root->left);
        pack_huffman_tree(file, data, root->right);
    }
}

void unpack_huffman_tree(data *data, huffman_tree **root) {
    *root = (huffman_tree *) malloc(sizeof(huffman_tree));
    (*root)->weight = 0;

    uc bit = 0;
    unpack_bit(data, &bit);

    if (bit != 0) {
        (*root)->symbol = 0;
        unpack_huffman_tree(data, &((*root)->left));
        unpack_huffman_tree(data, &((*root)->right));
    } else {
        (*root)->left = 0, (*root)->right = 0;
        uc symbol;
        unpack_byte(data, &symbol);
        (*root)->symbol = symbol;
    }
}

void encode(FILE *in, FILE *out) {

    ui table_frequency[ALPHABET];
    long text_length = read_file(table_frequency, in);

    if (text_length == 0) {
        return;
    }

    huffman_tree *root;
    make_huffman_tree(&root, table_frequency);

    char *codes[ALPHABET] = {NULL};
    char current_code[ALPHABET] = {0};
    make_table(root, codes, current_code);
    fwrite(&(text_length), 4, 1, out);

    data data;
    init_data(&data, 1);
    pack_huffman_tree(out, &data, root);

    for (long i = 0; i < text_length; i++) {
        uc c;
        if (fread(&c, 1, 1, in)) {}
        for (ui j = 0; j < strlen(codes[c]); j++) {
            bit_writing(out, &data, codes[c][j]);
        }
    }

    if (data.bite_count != SIZE_OF_BYTE) {
        fwrite(&(data.buf[data.byte_count]), 1, 1, out);
    }

    free(data.buf);
    free_tree(&root);
    free_table(codes);
}

void decode(FILE *file, FILE *out) {
    huffman_tree *root;
    ui num_of_encoded = 0;

    data data;
    init_data(&data, MAX_BUFFER_LEN);

    if (fread(&num_of_encoded, 4, 1, file)) {}
    if (fread(data.buf, 1, MAX_BUFFER_LEN, file)) {}

    unpack_huffman_tree(&data, &root);

    for (unsigned long i = 0; i < num_of_encoded; i++) {
        uc symbol = unpacking_char(file, root, &data);
        fwrite(&symbol, 1, 1, out);
    }

    free(data.buf);
    free_tree(&root);
}

int main() {
    uc mode;

    FILE *in = fopen("in.txt", "r");
    FILE *out = fopen("out.txt", "w");

    if (fread(&mode, 1, 1, in)) {}

    switch (mode) {
        case 'c':
            encode(in, out);
            break;
        case 'd':
            decode(in, out);
            break;
        default:
            return 0;
    }

    fclose(in);
    fclose(out);
    return 0;
}
