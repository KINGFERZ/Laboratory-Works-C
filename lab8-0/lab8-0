#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAXSIZE 5000

typedef struct graph{
    short int x;
    short int y;
    int length;
}node;

typedef struct mst{
    node *edges;
    int len;
}mst;

int compare(const void *p, const void *q){
    int arg1 = ((node*)p)->length;
    int arg2 = ((node*)q)->length;
    return arg1 - arg2;
}

int check_input(int num_of_vertices, int num_of_edges){
    if (num_of_vertices < 0 || num_of_vertices > MAXSIZE){
        printf("bad number of vertices");
        return 0;
    }
    if (num_of_edges < 0 || num_of_edges > (num_of_vertices * (num_of_vertices - 1) / 2)) {
        printf("bad number of edges");
        return 0;
    }
    if(num_of_edges == 0 && num_of_vertices == 0){
        printf("no spanning tree");
        return 0;
    }
    return 1;
}

int read_graph(node *edges, int num_of_vertices, int num_of_edges){
    short int x, y;
    unsigned long long length;
    for (int i = 0; i < num_of_edges; i++){
        if (scanf("%hi %hi %llu", &x, &y, &length) != 3){
            printf("bad number of lines");
            return 0;
        }
        if (x < 1 || x > num_of_vertices || y < 1 || y > num_of_vertices){
            printf("bad vertex");
            return 0;
        }
        if (length > INT_MAX){
            printf("bad length");
            return 0;
        }
        else{
            edges[i].x = x;
            edges[i].y = y;
            edges[i].length = length;
        }
    }
    return 1;
}

void dsu_init(int *dsu, int num_of_vertices){
    for (int i = 0; i < num_of_vertices + 1; i++){
        dsu[i] = i;
    }
}

int find(int *dsu, int vertex){
    return (dsu[vertex]);
}

void unite_sets(int *dsu, int arg1, int arg2, int num_of_vertices){
    for (int i = 0; i < num_of_vertices + 1; i++){
        if (dsu[i] == arg2){
            dsu[i] = arg1;
        }
    }
}

void kruskal(node *edges, mst *MST,int *dsu, int num_of_vertices, int num_of_edges){
    for (int i = 0; i < num_of_edges; i++){
        int arg1 = find(dsu, edges[i].x);
        int arg2 = find(dsu, edges[i].y);
        if (arg1 != arg2){
            MST->edges[MST->len] = edges[i];
            MST->len++;
            unite_sets(dsu, arg1, arg2, num_of_vertices);
        }
    }
}

void print_function(mst *MST, int num_of_vertices){
    if (MST->len < num_of_vertices - 1){
        printf("no spanning tree");
    }
    else{
        for (int i = 0; i < MST->len; i++){
            printf("%d %d\n", MST->edges[i].x, MST->edges[i].y);
        }
    }
}

void free_memory(mst *MST, node *edges, int *dsu){
    free(MST->edges);
    free(MST);
    free(edges);
    free(dsu);
}

int main(){
    int num_of_vertices = 0, num_of_edges = 0;
    if (scanf("%d %d", &num_of_vertices, &num_of_edges) != 2){
        printf("bad number of lines");
        return 0;
    }
    if (check_input(num_of_vertices, num_of_edges) != 1){
        return 0;
    }

    int *dsu = malloc((num_of_vertices + 1) * sizeof(int));    //disjoint set union
    node *edges = malloc(num_of_edges * sizeof(node));

    mst *MST = malloc(sizeof(mst));
    MST->edges = malloc(num_of_edges * sizeof(node));
    MST->len = 0;

    if(read_graph(edges, num_of_vertices, num_of_edges) != 1){
        free_memory(MST, edges, dsu);
        return 0;
    }
    qsort(edges, num_of_edges, sizeof(node), compare);

    dsu_init(dsu, num_of_vertices);
    kruskal(edges, MST, dsu, num_of_vertices, num_of_edges);

    print_function(MST, num_of_vertices);
    free_memory(MST, edges, dsu);
    return EXIT_SUCCESS;
}
